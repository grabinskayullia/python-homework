# Задание № 2
class OwnError:
    def __init__(self, divider, denominator):
        self.divider = divider
        self.denominator = denominator

    @staticmethod
    def divide_by_null(divider, denominator):
        try:
            return (divider / denominator)
        except:
            return (f"Деление на ноль недопустимо")


div = OwnError(10, 100)
print(OwnError.divide_by_null(10, 0))
print(OwnError.divide_by_null(10, 0.1))
print(div.divide_by_null(100, 0))



# Задание № 4, 5, 6
class Stock:
    def __init__(self, name, price, quantity, number_of_lists, *args):
        self.name = name
        self.price = price
        self.quantity = quantity
        self.numb = number_of_lists
        self.full_store = []
        self.store = []
        self.my_unit = {'Модель устройства': self.name, 'Цена за ед': self.price, 'Количество': self.quantity}

    def __str__(self):
        return f'Название - {self.name}, цена - {self.price}, количество - {self.quantity}'


    def reception(self):
        try:
            unit_name = input("Введите название: ")
            unit_price = int(input("Введите цену: "))
            unit_quantity = int(input("Введите количество: "))
            unique = {'Модель устройства': unit_name, 'Цена за ед': unit_price,
                      'Количество': unit_quantity}
            self.my_unit.update(unique)
            self.store.append(self.my_unit)
            print(f'Текущий список -\n {self.store}')
        except:
            return f'Ошибка ввода данных'

        print(f'Для выхода - Q, продолжение - Enter')
        q = input(f'---> ')
        if q == 'Q' or q == 'q':
            self.full_store.append(self.store)
            print(f'Весь склад -\n {self.full_store}')
            return f'Выход'
        else:
            return Stock.reception(self)

class Printer(Stock):
    def to_print(self):
        return f'to print smth {self.numb} times'

class Scanner(Stock):
    def to_scan(self):
        return f'to scan smth {self.numb} times'

class Copier(Stock):
    def to_copier(self):
        return f'to copier smth  {self.numb} times'

unit_1 = Printer('hp', 2000, 5, 10)
unit_2 = Scanner('Canon', 1200, 5, 10)
unit_3 = Copier('Xerox', 1500, 1, 15)

print(unit_1.reception())
print(unit_2.reception())
print(unit_3.reception())
print(unit_1.to_print())
print(unit_3.to_copier())
